{"version":3,"sources":["webpack:///src/app/explore-container/explore-container.component.ts","webpack:///src/app/explore-container/explore-container.component.html","webpack:///src/app/explore-container/explore-container.module.ts","webpack:///src/app/services/photo.service.ts"],"names":["ExploreContainerComponent","selector","templateUrl","styleUrls","ExploreContainerComponentModule","imports","declarations","exports","Camera","Filesystem","Storage","PhotoService","platform","photos","PHOTO_STORAGE","convertBlobToBase64","blob","Promise","resolve","reject","reader","FileReader","onerror","onload","result","readAsDataURL","get","key","photoList","JSON","parse","value","is","photo","readFile","path","filepath","directory","Data","webviewPath","data","getPhoto","resultType","Uri","source","quality","capturedPhoto","savePicture","savedImageFile","unshift","set","stringify","Photos","cameraPhoto","readAsBase64","base64Data","fileName","Date","getTime","writeFile","savedFile","uri","convertFileSrc","webPath","file","fetch","response","position","splice","filename","substr","lastIndexOf","deleteFile","clear","providedIn"],"mappings":"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","file":"default~tab2-tab2-module~tab3-tab3-module-es5.js","sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-explore-container',\n  templateUrl: './explore-container.component.html',\n  styleUrls: ['./explore-container.component.scss'],\n})\nexport class ExploreContainerComponent implements OnInit {\n  @Input() name: string;\n  \n  constructor() { }\n\n  ngOnInit() {}\n\n}\n","<div id=\"container\">\n  <strong>{{ name }}</strong>\n  <p>Explore <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ionicframework.com/docs/components\">UI Components</a></p>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ExploreContainerComponent } from './explore-container.component';\n\n@NgModule({\n  imports: [ CommonModule, FormsModule,IonicModule,],\n  declarations: [ExploreContainerComponent],\n  exports: [ExploreContainerComponent]\n})\nexport class ExploreContainerComponentModule {}\n","import { Injectable } from '@angular/core';\r\nimport { Plugins, CameraResultType, Capacitor, FilesystemDirectory, CameraPhoto, CameraSource } from '@capacitor/core';\r\nimport { Platform } from '@ionic/angular';\r\n\r\nconst { Camera, Filesystem, Storage } = Plugins;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PhotoService {\r\n  public photos: Photo[] = [];\r\n  private PHOTO_STORAGE: string = \"photos\";\r\n  private platform: Platform;\r\n\r\n  constructor(platform: Platform) {\r\n    this.platform = platform;\r\n   }\r\n\r\n  public async loadSaved() {\r\n    // Retrieve cached photo array data\r\n    const photoList = await Storage.get({ key: this.PHOTO_STORAGE });\r\n    this.photos = JSON.parse(photoList.value) || [];\r\n\r\n    // If running on the web...\r\n    if (!this.platform.is('hybrid')) {\r\n      // Display the photo by reading into base64 format\r\n      for (let photo of this.photos) {\r\n        // Read each saved photo's data from the Filesystem\r\n        const readFile = await Filesystem.readFile({\r\n            path: photo.filepath,\r\n            directory: FilesystemDirectory.Data\r\n        });\r\n      \r\n        // Web platform only: Load the photo as base64 data\r\n        photo.webviewPath = `data:image/jpeg;base64,${readFile.data}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Use the device camera to take a photo:\r\n  // https://capacitor.ionicframework.com/docs/apis/camera\r\n  \r\n  // Store the photo data into permanent file storage:\r\n  // https://capacitor.ionicframework.com/docs/apis/filesystem\r\n  \r\n  // Store a reference to all photo filepaths using Storage API:\r\n  // https://capacitor.ionicframework.com/docs/apis/storage\r\n  */\r\n  public async addNewToGallery() {\r\n    // Take a photo\r\n    const capturedPhoto = await Camera.getPhoto({\r\n      resultType: CameraResultType.Uri, // file-based data; provides best performance\r\n      source: CameraSource.Camera, // automatically take a new photo with the camera\r\n      quality: 100 // highest quality (0 to 100)\r\n    });\r\n    \r\n    const savedImageFile = await this.savePicture(capturedPhoto);\r\n\r\n    // Add new photo to Photos array\r\n    this.photos.unshift(savedImageFile);\r\n\r\n    // Cache all photo data for future retrieval\r\n    Storage.set({\r\n      key: this.PHOTO_STORAGE,\r\n      value: JSON.stringify(this.photos)\r\n    });\r\n  }\r\n\r\n  async addNewFromGallery() {\r\n    // Take a photo\r\n    const capturedPhoto = await Camera.getPhoto({\r\n      resultType: CameraResultType.Uri, // file-based data; provides best performance\r\n      source: CameraSource.Photos, // image from gallery\r\n      quality: 100 // highest quality (0 to 100)\r\n    });\r\n    \r\n    const savedImageFile = await this.savePicture(capturedPhoto);\r\n\r\n    // Add new photo to Photos array\r\n    this.photos.unshift(savedImageFile);\r\n\r\n    // Cache all photo data for future retrieval\r\n    Storage.set({\r\n      key: this.PHOTO_STORAGE,\r\n      value: JSON.stringify(this.photos)\r\n    });\r\n \r\n  }\r\n\r\n  // Save picture to file on device\r\n  private async savePicture(cameraPhoto: CameraPhoto) {\r\n    // Convert photo to base64 format, required by Filesystem API to save\r\n    const base64Data = await this.readAsBase64(cameraPhoto);\r\n\r\n    // Write the file to the data directory\r\n    const fileName = new Date().getTime() + '.jpeg';\r\n    const savedFile = await Filesystem.writeFile({\r\n      path: fileName,\r\n      data: base64Data,\r\n      directory: FilesystemDirectory.Data\r\n    });\r\n\r\n    if (this.platform.is('hybrid')) {\r\n      // Display the new image by rewriting the 'file://' path to HTTP\r\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\r\n      return {\r\n        filepath: savedFile.uri,\r\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri),\r\n      };\r\n    }\r\n    else {\r\n      // Use webPath to display the new image instead of base64 since it's \r\n      // already loaded into memory\r\n      return {\r\n        filepath: fileName,\r\n        webviewPath: cameraPhoto.webPath\r\n      };\r\n    }\r\n  }\r\n\r\n  // Read camera photo into base64 format based on the platform the app is running on\r\n  private async readAsBase64(cameraPhoto: CameraPhoto) {\r\n    // \"hybrid\" will detect Cordova or Capacitor\r\n    if (this.platform.is('hybrid')) {\r\n      // Read the file into base64 format\r\n      const file = await Filesystem.readFile({\r\n        path: cameraPhoto.path\r\n      });\r\n\r\n      return file.data;\r\n    }\r\n    else {\r\n      // Fetch the photo, read as a blob, then convert to base64 format\r\n      const response = await fetch(cameraPhoto.webPath!);\r\n      const blob = await response.blob();\r\n\r\n      return await this.convertBlobToBase64(blob) as string;  \r\n    }\r\n  }\r\n\r\n  // Delete picture by removing it from reference data and the filesystem\r\n  public async deletePicture(photo: Photo, position: number) {\r\n    // Remove this photo from the Photos reference data array\r\n    this.photos.splice(position, 1);\r\n\r\n    // Update photos array cache by overwriting the existing photo array\r\n    Storage.set({\r\n      key: this.PHOTO_STORAGE,\r\n      value: JSON.stringify(this.photos)\r\n    });\r\n\r\n    // delete photo file from filesystem\r\n    const filename = photo.filepath.substr(photo.filepath.lastIndexOf('/') + 1);\r\n    await Filesystem.deleteFile({\r\n      path: filename,\r\n      directory: FilesystemDirectory.Data\r\n    });\r\n  }\r\n\r\n  convertBlobToBase64 = (blob: Blob) => new Promise((resolve, reject) => {\r\n    const reader = new FileReader;\r\n    reader.onerror = reject;\r\n    reader.onload = () => {\r\n        resolve(reader.result);\r\n    };\r\n    reader.readAsDataURL(blob);\r\n  });\r\n\r\n  public async deleteAllPicture() {\r\n    // Retrieve cached photo array data\r\n    const photoList = await Storage.get({ key: this.PHOTO_STORAGE });\r\n    this.photos = JSON.parse(photoList.value) || [];\r\n\r\n    // If running on the web...\r\n    if (!this.platform.is('hybrid')) {\r\n      // Display the photo by reading into base64 format\r\n      for (let photo of this.photos) {\r\n        // delete photo file from filesystem\r\n        await Filesystem.deleteFile({\r\n            path: photo.filepath,\r\n            directory: FilesystemDirectory.Data\r\n        });\r\n      }\r\n    }\r\n    Storage.clear();\r\n    // Storage.set({\r\n    //   key: this.PHOTO_STORAGE,\r\n    //   value: \"\"\r\n    // });\r\n  }\r\n}\r\n\r\nexport interface Photo {\r\n  filepath: string;\r\n  webviewPath: string;\r\n}\r\n"]}